@page "/IterateReadableStream"
@inject IJSInProcessRuntime JSRuntime

<PageTitle>Streams - Iterate ReadableStream</PageTitle>

<h2>Iterating a ReadableStream</h2>
On this page we create a <code>MemoryStream</code> of @dataSize bytes in C# and parse that to JavaScript to create a <code>IJSObjectReference</code> for the stream.
<br />
From the JS reference we create a <code>ReadableStream</code> and gets the <code>ReadableStreamDefaultReader</code> of that.
<br />
We iterate the <code>ReadableStream</code> using <code>await foreach(var chunk in reader)</code>
@for (int i = 0; i < chunkSizes.Count; i++)
{
    <div><b>chunk @i size: </b> @chunkSizes[i] bytes</div>
}


@code {
    private List<int> chunkSizes = new();
    private int dataSize = 1000 * 1024;

    protected override async Task OnInitializedAsync()
    {
        using Stream data = new System.IO.MemoryStream(new byte[dataSize]);
        using DotNetStreamReference streamRef = new DotNetStreamReference(stream: data, leaveOpen: false);
        await using IJSInProcessObjectReference jSStreamReference = await JSRuntime.InvokeAsync<IJSInProcessObjectReference>("jSStreamReference", streamRef);
        await using ReadableStream readableStream = await ReadableStream.CreateAsync(JSRuntime, jSStreamReference);
        await using ReadableStreamDefaultReader reader = await readableStream.GetDefaultReaderAsync();
        await foreach (var chunk in reader)
        {
            var length = await JSRuntime.InvokeAsync<int>("getAttribute", chunk, "length");
            chunkSizes.Add(length);
            await Task.Delay(100);
            StateHasChanged();
        }
    }
}