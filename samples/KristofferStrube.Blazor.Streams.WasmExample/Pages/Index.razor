@page "/"
@using KristofferStrube.Blazor.WebIDL
@inject IJSInProcessRuntime JSRuntime

<PageTitle>Streams - Index</PageTitle>

<h2>Reading a Stream</h2>
On this page we create a <code>MemoryStream</code> of @dataSize bytes in C# and parse that to JavaScript to create a <code>IJSObjectReference</code> for the stream.
<br />
From the JS reference we create a <code>ReadableStreamInProcess</code> and gets the <code>ReadableStreamDefaultReader</code> of that.
<br />
Using the reader we read the chunks until there are no more.
@for (int i = 0; i < chunkSizes.Count; i++)
{
    <div><b>chunk @i size: </b> @chunkSizes[i] bytes</div>
}

@code {
    private List<long> chunkSizes = new();
    private int dataSize = 1000 * 1024;

    protected override async Task OnInitializedAsync()
    {
        using Stream data = new System.IO.MemoryStream(new byte[dataSize]);
        using DotNetStreamReference streamRef = new DotNetStreamReference(stream: data, leaveOpen: false);
        await using IJSInProcessObjectReference jSStreamReference = await JSRuntime.InvokeAsync<IJSInProcessObjectReference>("jSStreamReference", streamRef);
        await using ReadableStreamInProcess readableStream = await ReadableStreamInProcess.CreateAsync(JSRuntime, jSStreamReference);
        await using ReadableStreamDefaultReaderInProcess readableStreamReader = readableStream.GetDefaultReader();
        ReadableStreamReadResultInProcess read = await readableStreamReader.ReadAsync();
        while (!read.Done)
        {
            await using Uint8ArrayInProcess chunk = await Uint8ArrayInProcess.CreateAsync(
                JSRuntime,
                read.Value,
                new() { DisposesJSReference = true }
            );
            var length = chunk.Length;
            chunkSizes.Add(length);
            await Task.Delay(100);
            await read.DisposeAsync();
            read = await readableStreamReader.ReadAsync();
            StateHasChanged();
        }
        await read.DisposeAsync();
    }
}